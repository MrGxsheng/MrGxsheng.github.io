<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>枫叶苑</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-09-13T00:56:03.371Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Mr笙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>平衡树</title>
    <link href="http://example.com/2022/09/22/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    <id>http://example.com/2022/09/22/%E5%B9%B3%E8%A1%A1%E6%A0%91/</id>
    <published>2022-09-22T04:12:57.000Z</published>
    <updated>2022-09-13T00:56:03.371Z</updated>
    
    <content type="html"><![CDATA[<h2 id="二叉搜索树-BST"><a href="#二叉搜索树-BST" class="headerlink" title="二叉搜索树 BST"></a>二叉搜索树 BST</h2><ul><li>当前节点的 左子树中的任何一个点的权值&lt; 当前节点的权值</li><li>当前节点的 右子树中的任何一个点的权值&gt;当前节点的权值</li><li>中序遍历 左 根 右 遍历出来的是有序序列</li><li>本质上是维护一个有序 序列&#x2F;集合</li></ul><h4 id="结构体定义"><a href="#结构体定义" class="headerlink" title="结构体定义"></a>结构体定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;  <span class="comment">// 左右儿子</span></span><br><span class="line">    <span class="type">int</span> key;   <span class="comment">// 二叉搜索树权值</span></span><br><span class="line">    <span class="type">int</span> val;   <span class="comment">// 大根堆的随机权值</span></span><br><span class="line">    <span class="type">int</span> cnt;   <span class="comment">// 当前节点的key的重复个数</span></span><br><span class="line">    <span class="type">int</span> size;  <span class="comment">// 当前节点的子孙节点个数</span></span><br><span class="line">&#125; tr[N];    <span class="comment">//空间O(N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Treap在以关键码构成二叉搜索树的同时，还满足堆的性质,且堆的权重随机,这使得treap的期望复杂度是logn</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> root, idx;<span class="comment">// 根节点序号 和 序号</span></span><br></pre></td></tr></table></figure><h4 id="pushup"><a href="#pushup" class="headerlink" title="pushup"></a>pushup</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//更新父节点size信息,用儿子节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    tr[p].size = tr[tr[p].l].size + tr[tr[p].r].size + tr[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个叶节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_node</span><span class="params">(<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    tr[++ idx].key = key;</span><br><span class="line">    tr[idx].val = <span class="built_in">rand</span>();<span class="comment">//随机值</span></span><br><span class="line">    tr[idx].cnt = tr[idx].size = <span class="number">1</span>;<span class="comment">//cnt,size</span></span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化平衡树 左右哨兵 </span></span><br><span class="line"><span class="comment">//y总:如果查询的结果可能不存在，那加上哨兵之后可以保证查询的结果一定存在，就不需要在查询过程中特判无解的</span></span><br><span class="line"><span class="comment">//情况了。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_node</span>(-INF),<span class="built_in">get_node</span>(INF);</span><br><span class="line">    root = <span class="number">1</span>,tr[<span class="number">1</span>].r = <span class="number">2</span>;<span class="comment">//+inf &gt; -inf,+inf在-inf右边</span></span><br><span class="line">    <span class="built_in">pushup</span>(root);<span class="comment">//更新root的size</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h4><ul><li><img src="https://hasdsd-markdown.oss-cn-beijing.aliyuncs.com/img/image-20220718084847074.png" alt="image-20220718084847074"></li><li>不会影响中序遍历的结果</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zag</span><span class="params">(<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> q = tr[p].r;</span><br><span class="line">    tr[p].r = tr[q].l;<span class="comment">//p的右儿子是q的左儿子</span></span><br><span class="line">    tr[q].l = p;<span class="comment">//q的左儿子是p</span></span><br><span class="line">    p = q;<span class="comment">//p再变回根</span></span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].l);</span><br><span class="line">    <span class="built_in">pushup</span>(p);    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//右旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zig</span><span class="params">(<span class="type">int</span> &amp;p)</span></span>&#123; <span class="comment">//根变了,传引用</span></span><br><span class="line"><span class="comment">// 旋转的时候传root,root会变化,我们希望root还是真正的root,故用root</span></span><br><span class="line"><span class="comment">// p始终指向根</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q = tr[p].l; <span class="comment">//q是左儿子</span></span><br><span class="line">    tr[p].l = tr[q].r,<span class="comment">//p的左儿子是q的右儿子</span></span><br><span class="line">    tr[q].r = p,<span class="comment">//q的右儿子是p</span></span><br><span class="line">    p = q;<span class="comment">//p再变回根</span></span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].r),<span class="comment">//更新p.r</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">pushup</span>(p);<span class="comment">//不需要更新p是因为看着右旋图,右旋之前y左是A+B,y右是C,旋过之后实际上y左是A,y右是B+C,</span></span><br><span class="line">    <span class="comment">//但是不更新p,由于有 tr[q].r = p,相当于y的size由左侧的A+B和右侧的C构成,不影响最终size</span></span><br><span class="line">    <span class="comment">//但是p的r要更新,因为r由B和C构成(r旋前只有C)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><ul><li><p>set 里面的insert</p></li><li><p>&#96;&#96;&#96;c++<br>&#x2F;&#x2F;插入值key,从根开始</p><p>void insert(int &amp;p,int key)&#x2F;&#x2F;p是每一层根节点的指针<br>{<br>if(!p) p &#x3D; get_node(key);&#x2F;&#x2F; 不存在根,则构造(最底层时构造节点)<br>&#x2F;&#x2F;由于这里是引用,传过来的是A节点的左或右,get_node之后A节点的左和右就是get_node的返回值idx,故完成了连接<br><br><br>else if (tr[p].key &#x3D;&#x3D; key)tr[p].cnt ++; &#x2F;&#x2F; 刚好key和p的key相等, 则直接增加cnt<br>else if (tr[p].key &gt; key){ &#x2F;&#x2F; 当前节点值大于key,说明应该在左子树插入<br>    insert(tr[p].l,key);<br><br>    &#x2F;&#x2F;由于在左子树插入,插入左侧后左子树val可能大于根节点,左大右旋,保证堆的性质<br>    if(tr[tr[p].l].val &gt; tr[p].val) zig(p);<br>}<br>else{<br>    insert(tr[p].r,key);<br>    &#x2F;&#x2F;右大左旋<br>    if(tr[tr[p].r].val &gt; tr[p].val) zag(p);<br>}<br>pushup(p);&#x2F;&#x2F;p是每一层的根,指针,自底向上更新p<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 删除 </span><br><span class="line"></span><br><span class="line">* set 里面的erase</span><br><span class="line"></span><br><span class="line">* ```c++</span><br><span class="line">  void remove(int &amp;p,int key)&#123;</span><br><span class="line">      if(!p) return ;//不存在要删除的值</span><br><span class="line">      if(tr[p].key == key)&#123; //要删除当前节点</span><br><span class="line">          if(tr[p].cnt &gt; 1)tr[p].cnt --;</span><br><span class="line">          else if (tr[p].l || tr[p].r)&#123; // 当前节点只有一个可以且有左儿子或右儿子</span><br><span class="line">          //注意rand函数&gt;=0,左子树为空等价于idx = 0的点,其val为0</span><br><span class="line">  </span><br><span class="line">              if(!tr[p].r||tr[tr[p].l].val &gt; tr[tr[p].r].val)&#123;</span><br><span class="line">              //只存在左儿子(左val&gt;右val_0)或左val&gt;右val </span><br><span class="line">                  zig(p);//左val大右旋</span><br><span class="line">                  remove(tr[p].r,key);</span><br><span class="line">              &#125;</span><br><span class="line">              else//若存在右儿子且左val&lt;右val </span><br><span class="line">              //(左儿子也可能不存在, 不存在的话左儿子的val就是0, 肯定&lt;=右儿子的val(val最小为0), 这个模板隐含了判存在操作)</span><br><span class="line">              &#123;</span><br><span class="line">                  zag(p);//右大左旋</span><br><span class="line">                  remove(tr[p].l,key);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          else //不存在左右子树,是叶子节点</span><br><span class="line">              p = 0;//空节点</span><br><span class="line">  </span><br><span class="line">      &#125;else if (tr[p].key &gt; key)remove(tr[p].l,key);//去左侧删</span><br><span class="line">      else remove(tr[p].r,key);//右侧删</span><br><span class="line">      pushup(p);// 自底向上更新p的size</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="找前驱-x2F-后继"><a href="#找前驱-x2F-后继" class="headerlink" title="找前驱  &#x2F; 后继"></a>找前驱  &#x2F; 后继</h4><ul><li><p>前驱 ：中序遍历中的前一个位置</p></li><li><p>后继 ：中序遍历中的后一个位置</p></li><li><p>set 里面的++lower_bound &#x2F; –lower_bound</p></li><li><p>&#96;&#96;&#96;c++<br>int get_prev(int p, int key)   &#x2F;&#x2F; 找到严格小于key的最大数<br>{<br>if(!p) return -INF;<br>if(tr[p].key &gt;&#x3D; key) return get_prev(tr[p].l,key);&#x2F;&#x2F;当前大于key,右子树不考虑<br>return max(tr[p].key,get_prev(tr[p].r,key)); &#x2F;&#x2F;当前key&lt;key,不错,左子树都小于key所以不如key更好,所以考虑当前key和右子树<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```c++</span><br><span class="line">int get_next(int p, int key)    // 找到严格大于key的最小数</span><br><span class="line">&#123;</span><br><span class="line">    if(!p) return INF;</span><br><span class="line">    if(tr[p].key &lt;= key)return get_next(tr[p].r,key); //当前key小于key,左子树不考虑</span><br><span class="line">    return min(tr[p].key,get_next(tr[p].l,key)); //当前key&gt;key,不错,右子树都大于key所以不如key更好,所以考虑当前key和左子树</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="找最大值-x2F-最小值"><a href="#找最大值-x2F-最小值" class="headerlink" title="找最大值&#x2F;最小值"></a>找最大值&#x2F;最小值</h4><ul><li>set 里面的begin &#x2F; end - 1</li></ul><h4 id="求某个值的排名"><a href="#求某个值的排名" class="headerlink" title="求某个值的排名"></a>求某个值的排名</h4><ul><li>&#96;&#96;&#96;c++<br>&#x2F;&#x2F;没有修改,不需要引用<br>&#x2F;&#x2F;调用的时候 查排名,有-INF,排名要-1<br>int get_rank_by_key(int p, int key)    &#x2F;&#x2F; 通过数值找排名<br>{<br>if (!p) return 0;<br>if (tr[p].key &#x3D;&#x3D; key) return tr[tr[p].l].size + 1;&#x2F;&#x2F;左子树的size + 1(同样的数值中最靠左的)<br>if (tr[p].key &gt; key)return get_rank_by_key(tr[p].l,key);&#x2F;&#x2F;大了,去左子树找<br>return tr[tr[p].l].size + tr[p].cnt + get_rank_by_key(tr[p].r,key);&#x2F;&#x2F;去右边找的时候找的是在右子树中的排名,需要加上左子树和根的cnt<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 求排名是k的数</span><br><span class="line"></span><br><span class="line">#### 比某数小的最大值</span><br><span class="line"></span><br><span class="line">* 可能在树中不存在</span><br><span class="line"></span><br><span class="line">* ```c++</span><br><span class="line">  //调用的时候 查排名为x的数值,有-INF,内部排名为x + 1</span><br><span class="line">  int get_key_by_rank(int p, int rank)   // 通过排名找数值</span><br><span class="line">  &#123;</span><br><span class="line">      if(!p) return INF;</span><br><span class="line">      if(tr[tr[p].l].size &gt;= rank) return get_key_by_rank(tr[p].l,rank);</span><br><span class="line">      //左边的个数&gt;=rank,说明数值在左边</span><br><span class="line">      if(tr[tr[p].l].size + tr[p].cnt &gt;= rank)return tr[p].key;//左子树个数不够,加上当前cnt又多了,那就是当前数值</span><br><span class="line">      return get_key_by_rank(tr[p].r,rank - tr[tr[p].l].size - tr[p].cnt); //去右子树中找数值,排名应该先减去左子树size+cnt</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="比某数大的最小值"><a href="#比某数大的最小值" class="headerlink" title="比某数大的最小值"></a>比某数大的最小值</h4><ul><li>可能在树中不存在</li></ul><p><img src="https://hasdsd-markdown.oss-cn-beijing.aliyuncs.com/img/image-20220718145744435.png" alt="image-20220718145744435"></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>, INF = <span class="number">1e8</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="type">int</span> l, r;  <span class="comment">// 左右儿子</span></span><br><span class="line">    <span class="type">int</span> key;   <span class="comment">// 二叉搜索树权值</span></span><br><span class="line">    <span class="type">int</span> val;   <span class="comment">// 大根堆的随机权值</span></span><br><span class="line">    <span class="type">int</span> cnt;   <span class="comment">// 当前节点的key的重复个数</span></span><br><span class="line">    <span class="type">int</span> size;  <span class="comment">// 当前节点的子孙节点个数</span></span><br><span class="line">&#125; tr[N];    <span class="comment">//空间O(N)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Treap在以关键码构成二叉搜索树的同时，还满足堆的性质,且堆的权重随机,这使得treap的期望复杂度是logn</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> root, idx;<span class="comment">// 根节点序号 和 序号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更新父节点size信息,用儿子节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    tr[p].size = tr[tr[p].l].size + tr[tr[p].r].size + tr[p].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个叶节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_node</span><span class="params">(<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    tr[++ idx].key = key;</span><br><span class="line">    tr[idx].val = <span class="built_in">rand</span>();<span class="comment">//随机值</span></span><br><span class="line">    tr[idx].cnt = tr[idx].size = <span class="number">1</span>;<span class="comment">//cnt,size</span></span><br><span class="line">    <span class="keyword">return</span> idx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化平衡树 左右哨兵 </span></span><br><span class="line"><span class="comment">//y总:如果查询的结果可能不存在，那加上哨兵之后可以保证查询的结果一定存在，就不需要在查询过程中特判无解的</span></span><br><span class="line"><span class="comment">//情况了。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">get_node</span>(-INF),<span class="built_in">get_node</span>(INF);</span><br><span class="line">    root = <span class="number">1</span>,tr[<span class="number">1</span>].r = <span class="number">2</span>;<span class="comment">//+inf &gt; -inf,+inf在-inf右边</span></span><br><span class="line">    <span class="built_in">pushup</span>(root);<span class="comment">//更新root的size</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//右旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zig</span><span class="params">(<span class="type">int</span> &amp;p)</span></span>&#123; <span class="comment">//根变了,传引用</span></span><br><span class="line"><span class="comment">// 旋转的时候传root,root会变化,我们希望root还是真正的root,故用root</span></span><br><span class="line"><span class="comment">// p始终指向根</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> q = tr[p].l; <span class="comment">//q是左儿子</span></span><br><span class="line">    tr[p].l = tr[q].r,<span class="comment">//p的左儿子是q的右儿子</span></span><br><span class="line">    tr[q].r = p,<span class="comment">//q的右儿子是p</span></span><br><span class="line">    p = q;<span class="comment">//p再变回根</span></span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].r),<span class="comment">//更新p.r</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">pushup</span>(p);<span class="comment">//不需要更新p是因为看着右旋图,右旋之前y左是A+B,y右是C,旋过之后实际上y左是A,y右是B+C,</span></span><br><span class="line">    <span class="comment">//但是不更新p,由于有 tr[q].r = p,相当于y的size由左侧的A+B和右侧的C构成,不影响最终size</span></span><br><span class="line">    <span class="comment">//但是p的r要更新,因为r由B和C构成(r旋前只有C)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//左旋</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zag</span><span class="params">(<span class="type">int</span> &amp;p)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> q = tr[p].r;</span><br><span class="line">    tr[p].r = tr[q].l;<span class="comment">//p的右儿子是q的左儿子</span></span><br><span class="line">    tr[q].l = p;<span class="comment">//q的左儿子是p</span></span><br><span class="line">    p = q;<span class="comment">//p再变回根</span></span><br><span class="line">    <span class="built_in">pushup</span>(tr[p].l);</span><br><span class="line">    <span class="built_in">pushup</span>(p);    </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入值key,从根开始</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> key)</span><span class="comment">//p是每一层根节点的指针</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) p = <span class="built_in">get_node</span>(key);<span class="comment">// 不存在根,则构造(最底层时构造节点)</span></span><br><span class="line">    <span class="comment">//由于这里是引用,传过来的是A节点的左或右,get_node之后A节点的左和右就是get_node的返回值idx,故完成了连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key == key)tr[p].cnt ++; <span class="comment">// 刚好key和p的key相等, 则直接增加cnt</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key &gt; key)&#123; <span class="comment">// 当前节点值大于key,说明应该在左子树插入</span></span><br><span class="line">        <span class="built_in">insert</span>(tr[p].l,key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//由于在左子树插入,插入左侧后左子树val可能大于根节点,左大右旋,保证堆的性质</span></span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].l].val &gt; tr[p].val) <span class="built_in">zig</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">insert</span>(tr[p].r,key);</span><br><span class="line">        <span class="comment">//右大左旋</span></span><br><span class="line">        <span class="keyword">if</span>(tr[tr[p].r].val &gt; tr[p].val) <span class="built_in">zag</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pushup</span>(p);<span class="comment">//p是每一层的根,指针,自底向上更新p   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> &amp;p,<span class="type">int</span> key)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> ;<span class="comment">//不存在要删除的值</span></span><br><span class="line">    <span class="keyword">if</span>(tr[p].key == key)&#123; <span class="comment">//要删除当前节点</span></span><br><span class="line">        <span class="keyword">if</span>(tr[p].cnt &gt; <span class="number">1</span>)tr[p].cnt --;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tr[p].l || tr[p].r)&#123; <span class="comment">// 当前节点只有一个可以且有左儿子或右儿子</span></span><br><span class="line">        <span class="comment">//注意rand函数&gt;=0,左子树为空等价于idx = 0的点,其val为0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(!tr[p].r||tr[tr[p].l].val &gt; tr[tr[p].r].val)&#123;</span><br><span class="line">            <span class="comment">//只存在左儿子(左val&gt;右val_0)或左val&gt;右val </span></span><br><span class="line">                <span class="built_in">zig</span>(p);<span class="comment">//左val大右旋</span></span><br><span class="line">                <span class="built_in">remove</span>(tr[p].r,key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span><span class="comment">//若存在右儿子且左val&lt;右val </span></span><br><span class="line">            <span class="comment">//(左儿子也可能不存在, 不存在的话左儿子的val就是0, 肯定&lt;=右儿子的val(val最小为0), 这个模板隐含了判存在操作)</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">zag</span>(p);<span class="comment">//右大左旋</span></span><br><span class="line">                <span class="built_in">remove</span>(tr[p].l,key);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="comment">//不存在左右子树,是叶子节点</span></span><br><span class="line">            p = <span class="number">0</span>;<span class="comment">//空节点</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (tr[p].key &gt; key)<span class="built_in">remove</span>(tr[p].l,key);<span class="comment">//去左侧删</span></span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">remove</span>(tr[p].r,key);<span class="comment">//右侧删</span></span><br><span class="line">    <span class="built_in">pushup</span>(p);<span class="comment">// 自底向上更新p的size</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有修改,不需要引用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_rank_by_key</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> key)</span>    <span class="comment">// 通过数值找排名</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (tr[p].key == key) <span class="keyword">return</span> tr[tr[p].l].size + <span class="number">1</span>;<span class="comment">//左子树的size + 1(同样的数值中最靠左的)</span></span><br><span class="line">    <span class="keyword">if</span> (tr[p].key &gt; key)<span class="keyword">return</span> <span class="built_in">get_rank_by_key</span>(tr[p].l,key);<span class="comment">//大了,去左子树找</span></span><br><span class="line">    <span class="keyword">return</span> tr[tr[p].l].size + tr[p].cnt + <span class="built_in">get_rank_by_key</span>(tr[p].r,key);<span class="comment">//去右边找的时候找的是在右子树中的排名,需要加上左子树和根的cnt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_key_by_rank</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> rank)</span>   <span class="comment">// 通过排名找数值</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span>(tr[tr[p].l].size &gt;= rank) <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].l,rank);</span><br><span class="line">    <span class="comment">//左边的个数&gt;=rank,说明数值在左边</span></span><br><span class="line">    <span class="keyword">if</span>(tr[tr[p].l].size + tr[p].cnt &gt;= rank)<span class="keyword">return</span> tr[p].key;<span class="comment">//左子树个数不够,加上当前cnt又多了,那就是当前数值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">get_key_by_rank</span>(tr[p].r,rank - tr[tr[p].l].size - tr[p].cnt); <span class="comment">//去右子树中找数值,排名应该先减去左子树size+cnt</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_prev</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> key)</span>   <span class="comment">// 找到严格小于key的最大数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> -INF;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].key &gt;= key) <span class="keyword">return</span> <span class="built_in">get_prev</span>(tr[p].l,key);<span class="comment">//当前大于key,右子树不考虑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(tr[p].key,<span class="built_in">get_prev</span>(tr[p].r,key)); <span class="comment">//当前key&lt;key,不错,左子树都小于key所以不如key更好,所以考虑当前key和右子树</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get_next</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> key)</span>    <span class="comment">// 找到严格大于key的最小数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!p) <span class="keyword">return</span> INF;</span><br><span class="line">    <span class="keyword">if</span>(tr[p].key &lt;= key)<span class="keyword">return</span> <span class="built_in">get_next</span>(tr[p].r,key); <span class="comment">//当前key小于key,左子树不考虑</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(tr[p].key,<span class="built_in">get_next</span>(tr[p].l,key)); <span class="comment">//当前key&gt;key,不错,右子树都大于key所以不如key更好,所以考虑当前key和左子树</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">build</span>();</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">    <span class="keyword">while</span>(n --)&#123;</span><br><span class="line">        <span class="type">int</span> op,x;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;op,&amp;x);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) <span class="built_in">insert</span>(root,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">2</span>) <span class="built_in">remove</span>(root,x);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_rank_by_key</span>(root,x) - <span class="number">1</span>);<span class="comment">//查排名,有-INF,排名要-1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_key_by_rank</span>(root,x + <span class="number">1</span>));<span class="comment">//查排名为x的数值,有-INF,内部排名为x + 1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">5</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_prev</span>(root,x));</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in">get_next</span>(root,x));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;二叉搜索树-BST&quot;&gt;&lt;a href=&quot;#二叉搜索树-BST&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树 BST&quot;&gt;&lt;/a&gt;二叉搜索树 BST&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;当前节点的 左子树中的任何一个点的权值&amp;lt; 当前节点的权值&lt;/li&gt;</summary>
      
    
    
    
    <category term="平衡树" scheme="http://example.com/categories/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
    
    <category term="平衡树" scheme="http://example.com/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/09/12/hello-world/"/>
    <id>http://example.com/2022/09/12/hello-world/</id>
    <published>2022-09-12T01:37:40.391Z</published>
    <updated>2022-09-12T01:37:40.391Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
